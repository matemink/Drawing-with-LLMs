{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a792c3cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:34:37.828671Z",
     "iopub.status.busy": "2025-04-21T19:34:37.828473Z",
     "iopub.status.idle": "2025-04-21T19:34:37.832693Z",
     "shell.execute_reply": "2025-04-21T19:34:37.831921Z"
    },
    "papermill": {
     "duration": 0.008797,
     "end_time": "2025-04-21T19:34:37.834180",
     "exception": false,
     "start_time": "2025-04-21T19:34:37.825383",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#| default_exp core"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ded23c2a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:34:37.839001Z",
     "iopub.status.busy": "2025-04-21T19:34:37.838748Z",
     "iopub.status.idle": "2025-04-21T19:34:59.824729Z",
     "shell.execute_reply": "2025-04-21T19:34:59.824024Z"
    },
    "papermill": {
     "duration": 21.990094,
     "end_time": "2025-04-21T19:34:59.826400",
     "exception": false,
     "start_time": "2025-04-21T19:34:37.836306",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#| export\n",
    "import concurrent\n",
    "import io\n",
    "import logging\n",
    "import re\n",
    "import re2\n",
    "\n",
    "import cairosvg\n",
    "import kagglehub\n",
    "import torch\n",
    "from lxml import etree\n",
    "from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig\n",
    "from transformers.models.gemma3 import Gemma3ForConditionalGeneration, Gemma3Processor, Gemma3ForCausalLM\n",
    "\n",
    "svg_constraints = kagglehub.package_import('metric/svg-constraints')\n",
    "\n",
    "DEVICE = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n",
    "\n",
    "\n",
    "class Model:\n",
    "    def __init__(self):\n",
    "         # Quantization Configuration\n",
    "        quantization_config = BitsAndBytesConfig(\n",
    "            load_in_4bit=True,\n",
    "            bnb_4bit_quant_type=\"nf4\",\n",
    "            bnb_4bit_use_double_quant=True,\n",
    "            bnb_4bit_compute_dtype=torch.bfloat16,\n",
    "        )\n",
    "\n",
    "        self.model_path = kagglehub.model_download(\"google/gemma-3/transformers/gemma-3-12b-it\")\n",
    "        self.processor = Gemma3Processor.from_pretrained(self.model_path, use_fast=True)\n",
    "        self.model = Gemma3ForConditionalGeneration.from_pretrained(self.model_path, \n",
    "                                                                    quantization_config=quantization_config,\n",
    "                                                                    torch_dtype=torch.bfloat16, \n",
    "                                                                    device_map=\"auto\",)\n",
    "        \n",
    "\n",
    "        self.prompt_template = \"\"\"Generate SVG code to visually represent the following text description, while respecting the given constraints and guidelines.\n",
    "\n",
    "<constraints>\n",
    "* **Allowed Elements:** `svg`, `path`, `circle`, `rect`, `ellipse`, `line`, `polyline`, `polygon`, `g`, `linearGradient`, `radialGradient`, `stop`, `defs`\n",
    "* **Allowed Attributes:** `viewBox`, `width`, `height`, `fill`, `stroke`, `stroke-width`, `d`, `cx`, `cy`, `r`, `x`, `y`, `rx`, `ry`, `x1`, `y1`, `x2`, `y2`, `points`, `transform`, `opacity`\n",
    "* **Output Format:** Always use viewBox=\"0 0 256 256\" with width=\"256\" height=\"256\"\n",
    "</constraints>\n",
    "\n",
    "<example>\n",
    "<description>\"A red circle with a blue square inside\"</description>\n",
    "```svg\n",
    "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\">\n",
    "  <circle cx=\"128\" cy=\"128\" r=\"80\" fill=\"red\"/>\n",
    "  <rect x=\"88\" y=\"88\" width=\"80\" height=\"80\" fill=\"blue\"/>\n",
    "</svg>\n",
    "```\n",
    "</example>\n",
    "\n",
    "Please ensure that the generated SVG code is well-formed, valid, and strictly adheres to these constraints. Focus on a clear and concise representation of the input description within the given limitations. Always give the complete SVG code with nothing omitted. Never use an ellipsis.\n",
    "\n",
    "<description>\"{}\"</description>\n",
    "```svg\n",
    "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\">\n",
    "\"\"\"\n",
    "        self.default_svg = \"\"\"<svg width=\"256\" height=\"256\" viewBox=\"0 0 256 256\"><circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\" /></svg>\"\"\"\n",
    "        self.constraints = svg_constraints.SVGConstraints()\n",
    "        self.timeout_seconds = 200 #90\n",
    "\n",
    "    # You could try increasing `max_new_tokens`\n",
    "    def predict(self, description: str, max_new_tokens=512) -> str:\n",
    "        def generate_svg():\n",
    "            try:\n",
    "                prompt = self.prompt_template.format(description)\n",
    "                # inputs = self.tokenizer(text=prompt, return_tensors=\"pt\" , add_bos=True).to(DEVICE)\n",
    "                inputs = self.processor(text=prompt, return_tensors=\"pt\").to(DEVICE)\n",
    "\n",
    "                with torch.no_grad():\n",
    "                    output = self.model.generate(\n",
    "                        **inputs,\n",
    "                        max_new_tokens=max_new_tokens,\n",
    "                        do_sample=True,\n",
    "                        #temperature=0.8,\n",
    "                        #top_p=0.95,  # Add nucleus sampling\n",
    "                    )\n",
    "\n",
    "                output_decoded = self.processor.decode(output[0], \n",
    "                                                       skip_special_tokens=True, \n",
    "                                                       clean_up_tokenization_spaces=False)\n",
    "                logging.debug('Output decoded from model: %s', output_decoded)\n",
    "\n",
    "                matches = re.findall(r\"<svg.*?</svg>\", output_decoded, re.DOTALL | re.IGNORECASE)\n",
    "                if matches:\n",
    "                    svg = matches[-1]\n",
    "                else:\n",
    "                    return self.default_svg\n",
    "\n",
    "                logging.debug('Unprocessed SVG: %s', svg)\n",
    "                svg = self.enforce_constraints(svg)\n",
    "                logging.debug('Processed SVG: %s', svg)\n",
    "                # Ensure the generated code can be converted by cairosvg\n",
    "                cairosvg.svg2png(bytestring=svg.encode('utf-8'))\n",
    "                return svg\n",
    "            except Exception as e:\n",
    "                logging.error('Exception during SVG generation: %s', e)\n",
    "                return self.default_svg\n",
    "\n",
    "        # Execute SVG generation in a new thread to enforce time constraints\n",
    "        with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:\n",
    "            future = executor.submit(generate_svg)\n",
    "            try:\n",
    "                return future.result(timeout=self.timeout_seconds)\n",
    "            except concurrent.futures.TimeoutError:\n",
    "                logging.warning(\"Prediction timed out after %s seconds.\", self.timeout_seconds)\n",
    "                return self.default_svg\n",
    "            except Exception as e:\n",
    "                logging.error(f\"An unexpected error occurred: {e}\")\n",
    "                return self.default_svg\n",
    "\n",
    "    def enforce_constraints(self, svg_string: str) -> str:\n",
    "        \"\"\"Enforces constraints on an SVG string, removing disallowed elements\n",
    "        and attributes.\n",
    "\n",
    "        Parameters\n",
    "        ----------\n",
    "        svg_string : str\n",
    "            The SVG string to process.\n",
    "\n",
    "        Returns\n",
    "        -------\n",
    "        str\n",
    "            The processed SVG string, or the default SVG if constraints\n",
    "            cannot be satisfied.\n",
    "        \"\"\"\n",
    "        logging.info('Sanitizing SVG...')\n",
    "\n",
    "        try:\n",
    "            parser = etree.XMLParser(remove_blank_text=True, remove_comments=True)\n",
    "            root = etree.fromstring(svg_string, parser=parser)\n",
    "        except etree.ParseError as e:\n",
    "            logging.error('SVG Parse Error: %s. Returning default SVG.', e)\n",
    "            return self.default_svg\n",
    "    \n",
    "        elements_to_remove = []\n",
    "        for element in root.iter():\n",
    "            tag_name = etree.QName(element.tag).localname\n",
    "    \n",
    "            # Remove disallowed elements\n",
    "            if tag_name not in self.constraints.allowed_elements:\n",
    "                elements_to_remove.append(element)\n",
    "                continue  # Skip attribute checks for removed elements\n",
    "    \n",
    "            # Remove disallowed attributes\n",
    "            attrs_to_remove = []\n",
    "            for attr in element.attrib:\n",
    "                attr_name = etree.QName(attr).localname\n",
    "                if (\n",
    "                    attr_name\n",
    "                    not in self.constraints.allowed_elements[tag_name]\n",
    "                    and attr_name\n",
    "                    not in self.constraints.allowed_elements['common']\n",
    "                ):\n",
    "                    attrs_to_remove.append(attr)\n",
    "    \n",
    "            for attr in attrs_to_remove:\n",
    "                logging.debug(\n",
    "                    'Attribute \"%s\" for element \"%s\" not allowed. Removing.',\n",
    "                    attr,\n",
    "                    tag_name,\n",
    "                )\n",
    "                del element.attrib[attr]\n",
    "    \n",
    "            # Check and remove invalid href attributes\n",
    "            for attr, value in element.attrib.items():\n",
    "                 if etree.QName(attr).localname == 'href' and not value.startswith('#'):\n",
    "                    logging.debug(\n",
    "                        'Removing invalid href attribute in element \"%s\".', tag_name\n",
    "                    )\n",
    "                    del element.attrib[attr]\n",
    "\n",
    "            # Validate path elements to help ensure SVG conversion\n",
    "            if tag_name == 'path':\n",
    "                d_attribute = element.get('d')\n",
    "                if not d_attribute:\n",
    "                    logging.warning('Path element is missing \"d\" attribute. Removing path.')\n",
    "                    elements_to_remove.append(element)\n",
    "                    continue # Skip further checks for this removed element\n",
    "                # Use regex to validate 'd' attribute format\n",
    "                path_regex = re2.compile(\n",
    "                    r'^'  # Start of string\n",
    "                    r'(?:'  # Non-capturing group for each command + numbers block\n",
    "                    r'[MmZzLlHhVvCcSsQqTtAa]'  # Valid SVG path commands (adjusted to exclude extra letters)\n",
    "                    r'\\s*'  # Optional whitespace after command\n",
    "                    r'(?:'  # Non-capturing group for optional numbers\n",
    "                    r'-?\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?'  # First number\n",
    "                    r'(?:[\\s,]+-?\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?)*'  # Subsequent numbers with mandatory separator(s)\n",
    "                    r')?'  # Numbers are optional (e.g. for Z command)\n",
    "                    r'\\s*'  # Optional whitespace after numbers/command block\n",
    "                    r')+'  # One or more command blocks\n",
    "                    r'\\s*'  # Optional trailing whitespace\n",
    "                    r'$'  # End of string\n",
    "                )\n",
    "                if not path_regex.match(d_attribute):\n",
    "                    logging.warning(\n",
    "                        'Path element has malformed \"d\" attribute format. Removing path.'\n",
    "                    )\n",
    "                    elements_to_remove.append(element)\n",
    "                    continue\n",
    "                logging.debug('Path element \"d\" attribute validated (regex check).')\n",
    "        \n",
    "        # Remove elements marked for removal\n",
    "        for element in elements_to_remove:\n",
    "            if element.getparent() is not None:\n",
    "                element.getparent().remove(element)\n",
    "                logging.debug('Removed element: %s', element.tag)\n",
    "\n",
    "        try:\n",
    "            cleaned_svg_string = etree.tostring(root, encoding='unicode')\n",
    "            return cleaned_svg_string\n",
    "        except ValueError as e:\n",
    "            logging.error(\n",
    "                'SVG could not be sanitized to meet constraints: %s', e\n",
    "            )\n",
    "            return self.default_svg"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ea3b3414",
   "metadata": {
    "papermill": {
     "duration": 0.001584,
     "end_time": "2025-04-21T19:34:59.830092",
     "exception": false,
     "start_time": "2025-04-21T19:34:59.828508",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The following code tests the above model in a local mock-up of this competition's evaluation pipeline. It runs the model on a sample of 15 instances defined in the `test.csv` file in the `kaggle_evaluation` package folder."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "c684f258",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:34:59.834441Z",
     "iopub.status.busy": "2025-04-21T19:34:59.833985Z",
     "iopub.status.idle": "2025-04-21T19:35:00.387805Z",
     "shell.execute_reply": "2025-04-21T19:35:00.387148Z"
    },
    "papermill": {
     "duration": 0.557608,
     "end_time": "2025-04-21T19:35:00.389351",
     "exception": false,
     "start_time": "2025-04-21T19:34:59.831743",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import kaggle_evaluation\n",
    "\n",
    "#logging.basicConfig(level=logging.WARNING, force=True)\n",
    "#kaggle_evaluation.test(Model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fe9e870c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-04-21T19:35:00.393875Z",
     "iopub.status.busy": "2025-04-21T19:35:00.393653Z",
     "iopub.status.idle": "2025-04-21T19:50:35.806996Z",
     "shell.execute_reply": "2025-04-21T19:50:35.806149Z"
    },
    "papermill": {
     "duration": 935.417412,
     "end_time": "2025-04-21T19:50:35.808732",
     "exception": false,
     "start_time": "2025-04-21T19:35:00.391320",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><style>\n",
       ".dataframe > thead > tr,\n",
       ".dataframe > tbody > tr {\n",
       "  text-align: right;\n",
       "  white-space: pre-wrap;\n",
       "}\n",
       "</style>\n",
       "<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>description</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;02d892&quot;</td><td>&quot;a purple forest at dusk&quot;</td></tr><tr><td>&quot;0dcd2e&quot;</td><td>&quot;gray wool coat with a faux fur…</td></tr><tr><td>&quot;1e9ac1&quot;</td><td>&quot;a lighthouse overlooking the o…</td></tr><tr><td>&quot;2b25db&quot;</td><td>&quot;burgundy corduroy pants with p…</td></tr><tr><td>&quot;4e6a54&quot;</td><td>&quot;orange corduroy overalls&quot;</td></tr></tbody></table></div>"
      ],
      "text/plain": [
       "shape: (5, 2)\n",
       "┌────────┬─────────────────────────────────┐\n",
       "│ id     ┆ description                     │\n",
       "│ ---    ┆ ---                             │\n",
       "│ str    ┆ str                             │\n",
       "╞════════╪═════════════════════════════════╡\n",
       "│ 02d892 ┆ a purple forest at dusk         │\n",
       "│ 0dcd2e ┆ gray wool coat with a faux fur… │\n",
       "│ 1e9ac1 ┆ a lighthouse overlooking the o… │\n",
       "│ 2b25db ┆ burgundy corduroy pants with p… │\n",
       "│ 4e6a54 ┆ orange corduroy overalls        │\n",
       "└────────┴─────────────────────────────────┘"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "bc1c5a0747a74a1e90b1c356e6263a96",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'a purple forest at d...': 65.6014 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"forestGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\"><stop offset=\"0\" stop-color=\"#6a006a\"/><stop offset=\"0.5\" stop-color=\"#480048\"/><stop offset=\"1\" stop-color=\"#330033\"/></linearGradient></defs><rect width=\"256\" height=\"256\" fill=\"url(#forestGradient)\"/><polyline points=\"8,128 16,64 32,128 48,64 64,128 80,64 96,128 112,64 128,128 144,64 160,128 176,64 192,128 224,64 240,128\" stroke=\"green\" stroke-width=\"2\" fill=\"none\"/><polyline points=\"240,128 224,192 192,128 160,192 128,128 96,192 64,128 32,192 16,128\" stroke=\"green\" stroke-width=\"2\" fill=\"none\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"forestGradient\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\"><stop offset=\"0\" stop-color=\"#6a006a\"/><stop offset=\"0.5\" stop-color=\"#480048\"/><stop offset=\"1\" stop-color=\"#330033\"/></linearGradient></defs><rect width=\"256\" height=\"256\" fill=\"url(#forestGradient)\"/><polyline points=\"8,128 16,64 32,128 48,64 64,128 80,64 96,128 112,64 128,128 144,64 160,128 176,64 192,128 224,64 240,128\" stroke=\"green\" stroke-width=\"2\" fill=\"none\"/><polyline points=\"240,128 224,192 192,128 160,192 128,128 96,192 64,128 32,192 16,128\" stroke=\"green\" stroke-width=\"2\" fill=\"none\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'gray wool coat with ...': 20.4101 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"64\" y=\"64\" width=\"128\" height=\"128\" fill=\"gray\" stroke=\"black\" stroke-width=\"2\"/><ellipse cx=\"128\" cy=\"64\" rx=\"32\" ry=\"16\" fill=\"white\" stroke=\"black\" stroke-width=\"2\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"64\" y=\"64\" width=\"128\" height=\"128\" fill=\"gray\" stroke=\"black\" stroke-width=\"2\"/><ellipse cx=\"128\" cy=\"64\" rx=\"32\" ry=\"16\" fill=\"white\" stroke=\"black\" stroke-width=\"2\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'a lighthouse overloo...': 28.5311 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"128\" width=\"256\" height=\"128\" fill=\"blue\"/><rect x=\"128\" y=\"0\" width=\"32\" height=\"128\" fill=\"green\"/><path d=\"M 128 70 L 100 40 L 156 40 Z\" fill=\"white\"/><path d=\"M 128 70 L 128 20\" stroke=\"black\" stroke-width=\"3\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"128\" width=\"256\" height=\"128\" fill=\"blue\"/><rect x=\"128\" y=\"0\" width=\"32\" height=\"128\" fill=\"green\"/><path d=\"M 128 70 L 100 40 L 156 40 Z\" fill=\"white\"/><path d=\"M 128 70 L 128 20\" stroke=\"black\" stroke-width=\"3\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'burgundy corduroy pa...': 57.2614 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"64\" width=\"256\" height=\"128\" fill=\"#800020\"/><rect x=\"20\" y=\"80\" width=\"256\" height=\"20\" fill=\"#500010\"/><rect x=\"50\" y=\"112\" width=\"256\" height=\"20\" fill=\"#500010\"/><rect x=\"50\" y=\"144\" width=\"256\" height=\"20\" fill=\"#500010\"/><rect x=\"50\" y=\"176\" width=\"256\" height=\"20\" fill=\"#500010\"/><rect x=\"20\" y=\"80\" width=\"20\" height=\"128\" fill=\"silver\"/><rect x=\"236\" y=\"80\" width=\"20\" height=\"128\" fill=\"silver\"/><rect x=\"100\" y=\"80\" width=\"20\" height=\"128\" fill=\"silver\"/><rect x=\"176\" y=\"80\" width=\"20\" height=\"128\" fill=\"silver\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"64\" width=\"256\" height=\"128\" fill=\"#800020\"/><rect x=\"20\" y=\"80\" width=\"256\" height=\"20\" fill=\"#500010\"/><rect x=\"50\" y=\"112\" width=\"256\" height=\"20\" fill=\"#500010\"/><rect x=\"50\" y=\"144\" width=\"256\" height=\"20\" fill=\"#500010\"/><rect x=\"50\" y=\"176\" width=\"256\" height=\"20\" fill=\"#500010\"/><rect x=\"20\" y=\"80\" width=\"20\" height=\"128\" fill=\"silver\"/><rect x=\"236\" y=\"80\" width=\"20\" height=\"128\" fill=\"silver\"/><rect x=\"100\" y=\"80\" width=\"20\" height=\"128\" fill=\"silver\"/><rect x=\"176\" y=\"80\" width=\"20\" height=\"128\" fill=\"silver\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'orange corduroy over...': 51.5436 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"80\" width=\"256\" height=\"128\" fill=\"orange\" stroke=\"#333\" stroke-width=\"2\"/><rect x=\"50\" y=\"120\" width=\"156\" height=\"64\" fill=\"#fff\" stroke=\"#333\" stroke-width=\"2\"/><polyline points=\"20,80 20,120 20,160\" stroke=\"#333\" stroke-width=\"2\"/><polyline points=\"240,80 240,120 240,160\" stroke=\"#333\" stroke-width=\"2\"/><rect x=\"20\" y=\"160\" width=\"216\" height=\"32\" fill=\"#fff\" stroke=\"#333\" stroke-width=\"2\"/><polyline points=\"20,160 70,180 120,160 170,180 220,160\" stroke=\"#333\" stroke-width=\"2\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"80\" width=\"256\" height=\"128\" fill=\"orange\" stroke=\"#333\" stroke-width=\"2\"/><rect x=\"50\" y=\"120\" width=\"156\" height=\"64\" fill=\"#fff\" stroke=\"#333\" stroke-width=\"2\"/><polyline points=\"20,80 20,120 20,160\" stroke=\"#333\" stroke-width=\"2\"/><polyline points=\"240,80 240,120 240,160\" stroke=\"#333\" stroke-width=\"2\"/><rect x=\"20\" y=\"160\" width=\"216\" height=\"32\" fill=\"#fff\" stroke=\"#333\" stroke-width=\"2\"/><polyline points=\"20,160 70,180 120,160 170,180 220,160\" stroke=\"#333\" stroke-width=\"2\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'a purple silk scarf ...': 53.0252 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><path d=\"M16 16 L240 16 C248 16, 256 24, 256 32 L256 224 C256 232, 248 240, 240 240 L16 240 C8 240, 0 232, 0 224 L0 32 C0 24, 8 16, 16 16 Z\" fill=\"purple\" stroke=\"black\" stroke-width=\"2\"/><polyline points=\"240 240, 232 232, 240 224\" fill=\"gold\"/><polyline points=\"16 240, 8 232, 16 224\" fill=\"gold\"/><polyline points=\"240 16, 232 8, 240 32\" fill=\"gold\"/><polyline points=\"16 16, 8 8, 16 32\" fill=\"gold\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><path d=\"M16 16 L240 16 C248 16, 256 24, 256 32 L256 224 C256 232, 248 240, 240 240 L16 240 C8 240, 0 232, 0 224 L0 32 C0 24, 8 16, 16 16 Z\" fill=\"purple\" stroke=\"black\" stroke-width=\"2\"/><polyline points=\"240 240, 232 232, 240 224\" fill=\"gold\"/><polyline points=\"16 240, 8 232, 16 224\" fill=\"gold\"/><polyline points=\"240 16, 232 8, 240 32\" fill=\"gold\"/><polyline points=\"16 16, 8 8, 16 32\" fill=\"gold\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'a green lagoon under...': 29.0302 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"128\" width=\"256\" height=\"128\" fill=\"green\"/><rect x=\"0\" y=\"0\" width=\"256\" height=\"128\" fill=\"lightblue\"/><circle cx=\"50\" cy=\"50\" r=\"10\" fill=\"gray\"/><circle cx=\"150\" cy=\"70\" r=\"15\" fill=\"gray\"/><circle cx=\"200\" cy=\"100\" r=\"12\" fill=\"gray\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"128\" width=\"256\" height=\"128\" fill=\"green\"/><rect x=\"0\" y=\"0\" width=\"256\" height=\"128\" fill=\"lightblue\"/><circle cx=\"50\" cy=\"50\" r=\"10\" fill=\"gray\"/><circle cx=\"150\" cy=\"70\" r=\"15\" fill=\"gray\"/><circle cx=\"200\" cy=\"100\" r=\"12\" fill=\"gray\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'crimson rectangles f...': 67.5632 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"64\" y=\"0\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"128\" y=\"0\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"0\" y=\"64\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"64\" y=\"64\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"128\" y=\"64\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"0\" y=\"128\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"64\" y=\"128\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"128\" y=\"128\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"0\" y=\"192\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"64\" y=\"192\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"128\" y=\"192\" width=\"64\" height=\"64\" fill=\"crimson\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"64\" y=\"0\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"128\" y=\"0\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"0\" y=\"64\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"64\" y=\"64\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"128\" y=\"64\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"0\" y=\"128\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"64\" y=\"128\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"128\" y=\"128\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"0\" y=\"192\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"64\" y=\"192\" width=\"64\" height=\"64\" fill=\"crimson\"/><rect x=\"128\" y=\"192\" width=\"64\" height=\"64\" fill=\"crimson\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'purple pyramids spir...': 65.8215 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"purpleGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#800080\"/><stop offset=\"100%\" stop-color=\"#4B0082\"/></linearGradient><linearGradient id=\"bronzeGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#CD7F32\"/><stop offset=\"100%\" stop-color=\"#DAA520\"/></linearGradient></defs><path d=\"M128,32 L96,128 L160,128 Z\" fill=\"url(#bronzeGradient)\" stroke=\"none\"/><path d=\"M128,256 Q 100,180 156,180 Q 120,160 140,140 Q 160,120 170,100 Q 140,80 120,60 Q 100,40 80,20\" fill=\"url(#purpleGradient)\" stroke=\"none\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"purpleGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#800080\"/><stop offset=\"100%\" stop-color=\"#4B0082\"/></linearGradient><linearGradient id=\"bronzeGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#CD7F32\"/><stop offset=\"100%\" stop-color=\"#DAA520\"/></linearGradient></defs><path d=\"M128,32 L96,128 L160,128 Z\" fill=\"url(#bronzeGradient)\" stroke=\"none\"/><path d=\"M128,256 Q 100,180 156,180 Q 120,160 140,140 Q 160,120 170,100 Q 140,80 120,60 Q 100,40 80,20\" fill=\"url(#purpleGradient)\" stroke=\"none\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'magenta trapezoids l...': 25.7785 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" fill=\"silver\" opacity=\"0.5\"/><polygon points=\"20,20 100,100 236,100 216,20\" fill=\"magenta\"/><polygon points=\"50,70 120,140 200,140 180,70\" fill=\"magenta\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" fill=\"silver\" opacity=\"0.5\"/><polygon points=\"20,20 100,100 236,100 216,20\" fill=\"magenta\"/><polygon points=\"50,70 120,140 200,140 180,70\" fill=\"magenta\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'a snowy plain...': 33.1154 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" fill=\"#f0f8ff\"/><polyline points=\"0,50 128,0 256,50\" fill=\"none\" stroke=\"white\" stroke-width=\"2\"/><polyline points=\"0,100 128,200 256,100\" fill=\"none\" stroke=\"white\" stroke-width=\"2\"/><polyline points=\"0,150 128,250 256,150\" fill=\"none\" stroke=\"white\" stroke-width=\"2\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" fill=\"#f0f8ff\"/><polyline points=\"0,50 128,0 256,50\" fill=\"none\" stroke=\"white\" stroke-width=\"2\"/><polyline points=\"0,100 128,200 256,100\" fill=\"none\" stroke=\"white\" stroke-width=\"2\"/><polyline points=\"0,150 128,250 256,150\" fill=\"none\" stroke=\"white\" stroke-width=\"2\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'black and white chec...': 94.4500 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><circle cx=\"128\" cy=\"128\" r=\"80\" fill=\"red\"/><rect x=\"88\" y=\"88\" width=\"80\" height=\"80\" fill=\"blue\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><circle cx=\"128\" cy=\"128\" r=\"80\" fill=\"red\"/><rect x=\"88\" y=\"88\" width=\"80\" height=\"80\" fill=\"blue\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'a starlit night over...': 48.7615 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"128\" fill=\"#f0f8ff\"/><rect x=\"0\" y=\"128\" width=\"256\" height=\"128\" fill=\"#ffffff\"/><polygon points=\"128,40 100,80 156,80 120,110 136,110 112,140 148,140 124,170 132,170\" fill=\"yellow\" stroke=\"white\" stroke-width=\"1\"/><polyline points=\"128,40 70,150 186,150\" fill=\"none\" stroke=\"white\" stroke-width=\"2\"/><circle cx=\"50\" cy=\"200\" r=\"5\" fill=\"white\"/><circle cx=\"200\" cy=\"180\" r=\"6\" fill=\"white\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"128\" fill=\"#f0f8ff\"/><rect x=\"0\" y=\"128\" width=\"256\" height=\"128\" fill=\"#ffffff\"/><polygon points=\"128,40 100,80 156,80 120,110 136,110 112,140 148,140 124,170 132,170\" fill=\"yellow\" stroke=\"white\" stroke-width=\"1\"/><polyline points=\"128,40 70,150 186,150\" fill=\"none\" stroke=\"white\" stroke-width=\"2\"/><circle cx=\"50\" cy=\"200\" r=\"5\" fill=\"white\"/><circle cx=\"200\" cy=\"180\" r=\"6\" fill=\"white\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'khaki triangles and ...': 21.8113 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><polygon points=\"128,50 50,128 206,128\" fill=\"khaki\" transform=\"rotate(45 128 128)\"/><path d=\"M128,32 A128,128 0 0 1 128,224\" fill=\"azure\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><polygon points=\"128,50 50,128 206,128\" fill=\"khaki\" transform=\"rotate(45 128 128)\"/><path d=\"M128,32 A128,128 0 0 1 128,224\" fill=\"azure\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prediction time for description 'a maroon dodecahedro...': 86.6779 seconds\n",
      "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"maroonGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#800000\"/><stop offset=\"100%\" stop-color=\"#B00020\"/></linearGradient><linearGradient id=\"tealGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#008080\"/><stop offset=\"100%\" stop-color=\"#00B0B0\"/></linearGradient></defs><polygon points=\"128,20 165.46,70.5 211.44,117.91 191.72,165.57 165.46,211.94 128,186.09 90.54,211.94 64.07,165.57 36.56,117.91 21.44,70.5\" fill=\"url(#maroonGradient)\" stroke=\"black\" stroke-width=\"2\"/><path d=\"M 128,20 L 165.46,70.5 L 211.44,117.91\" stroke=\"url(#tealGradient)\" stroke-width=\"4\"/><path d=\"M 128,20 L 191.72,165.57\" stroke=\"url(#tealGradient)\" stroke-width=\"4\"/><path d=\"M 128,20 L 165.46,70.5\" stroke=\"url(#tealGradient)\" stroke-width=\"4\"/></svg>\n"
     ]
    },
    {
     "data": {
      "image/svg+xml": [
       "<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"maroonGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#800000\"/><stop offset=\"100%\" stop-color=\"#B00020\"/></linearGradient><linearGradient id=\"tealGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#008080\"/><stop offset=\"100%\" stop-color=\"#00B0B0\"/></linearGradient></defs><polygon points=\"128,20 165.46,70.5 211.44,117.91 191.72,165.57 165.46,211.94 128,186.09 90.54,211.94 64.07,165.57 36.56,117.91 21.44,70.5\" fill=\"url(#maroonGradient)\" stroke=\"black\" stroke-width=\"2\"/><path d=\"M 128,20 L 165.46,70.5 L 211.44,117.91\" stroke=\"url(#tealGradient)\" stroke-width=\"4\"/><path d=\"M 128,20 L 191.72,165.57\" stroke=\"url(#tealGradient)\" stroke-width=\"4\"/><path d=\"M 128,20 L 165.46,70.5\" stroke=\"url(#tealGradient)\" stroke-width=\"4\"/></svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def generate():\n",
    "    import polars as pl\n",
    "    from IPython.display import SVG\n",
    "    import time  # Import the time module\n",
    "    \n",
    "    logging.basicConfig(level=logging.ERROR, force=True)\n",
    "    \n",
    "    train = pl.read_csv('/kaggle/input/drawing-with-llms/train.csv')\n",
    "    display(train.head())\n",
    "    \n",
    "    model = Model()\n",
    "    svgs = []\n",
    "    for desc in train.get_column('description'):\n",
    "        start_time = time.time()  # Record start time\n",
    "        svg = model.predict(desc)\n",
    "        end_time = time.time()    # Record end time\n",
    "        elapsed_time = end_time - start_time # Calculate elapsed time\n",
    "        print(f\"Prediction time for description '{desc[:20]}...': {elapsed_time:.4f} seconds\") # Print time\n",
    "        print(svg)\n",
    "        try:\n",
    "            display(SVG(svg))\n",
    "        except Exception as e:\n",
    "            print(e)\n",
    "            continue\n",
    "\n",
    "# Uncomment and run the line below to see some generated images\n",
    "generate()"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "databundleVersionId": 11735795,
     "sourceId": 89659,
     "sourceType": "competition"
    },
    {
     "sourceId": 224423433,
     "sourceType": "kernelVersion"
    },
    {
     "modelId": 222398,
     "modelInstanceId": 239490,
     "sourceId": 282740,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 222398,
     "modelInstanceId": 239473,
     "sourceId": 282767,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30919,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 964.113931,
   "end_time": "2025-04-21T19:50:39.503322",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-04-21T19:34:35.389391",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "0c51caafb4e1408dbd94e6885f984d61": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "1c90f37bbc3141b6a733c722182cb55a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "423bc6cf3432473994d08f17ca62ef2a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "4f4525e812734109b547461b668b1dcc": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_65d3dfdd5805423cbaf5a266e21c3c7e",
       "placeholder": "​",
       "style": "IPY_MODEL_a1fba0c970b4492d9dd5b882b1b52a66",
       "tabbable": null,
       "tooltip": null,
       "value": " 5/5 [02:56&lt;00:00, 34.71s/it]"
      }
     },
     "58c8a30abd3b416daf3fe6ef4b89b938": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_0c51caafb4e1408dbd94e6885f984d61",
       "max": 5.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a5f6b2687a9049458de34c650f9ea923",
       "tabbable": null,
       "tooltip": null,
       "value": 5.0
      }
     },
     "65d3dfdd5805423cbaf5a266e21c3c7e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "a1fba0c970b4492d9dd5b882b1b52a66": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "a5f6b2687a9049458de34c650f9ea923": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "bc1c5a0747a74a1e90b1c356e6263a96": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_fb66eb3de2f54a2a8f5deba0590f2358",
        "IPY_MODEL_58c8a30abd3b416daf3fe6ef4b89b938",
        "IPY_MODEL_4f4525e812734109b547461b668b1dcc"
       ],
       "layout": "IPY_MODEL_1c90f37bbc3141b6a733c722182cb55a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f9258dc06f9948bd806d714a0a4ad5bc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fb66eb3de2f54a2a8f5deba0590f2358": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f9258dc06f9948bd806d714a0a4ad5bc",
       "placeholder": "​",
       "style": "IPY_MODEL_423bc6cf3432473994d08f17ca62ef2a",
       "tabbable": null,
       "tooltip": null,
       "value": "Loading checkpoint shards: 100%"
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
