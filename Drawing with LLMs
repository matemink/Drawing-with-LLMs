{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":89659,"databundleVersionId":11735795,"sourceType":"competition"},{"sourceId":224423433,"sourceType":"kernelVersion"},{"sourceId":282740,"sourceType":"modelInstanceVersion","modelInstanceId":239490,"modelId":222398},{"sourceId":282767,"sourceType":"modelInstanceVersion","modelInstanceId":239473,"modelId":222398}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#| default_exp core","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T14:17:31.306117Z","iopub.execute_input":"2025-04-20T14:17:31.306436Z","iopub.status.idle":"2025-04-20T14:17:31.310306Z","shell.execute_reply.started":"2025-04-20T14:17:31.306408Z","shell.execute_reply":"2025-04-20T14:17:31.309416Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"#| export\nimport concurrent\nimport io\nimport logging\nimport re\nimport re2\n\nimport cairosvg\nimport kagglehub\nimport torch\nfrom lxml import etree\nfrom transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig\nfrom transformers.models.gemma3 import Gemma3ForConditionalGeneration, Gemma3Processor, Gemma3ForCausalLM\n\nsvg_constraints = kagglehub.package_import('metric/svg-constraints')\n\nDEVICE = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\n\nclass Model:\n    def __init__(self):\n         # Quantization Configuration\n        quantization_config = BitsAndBytesConfig(\n            load_in_4bit=True,\n            bnb_4bit_quant_type=\"nf4\",\n            bnb_4bit_use_double_quant=True,\n            bnb_4bit_compute_dtype=torch.bfloat16,\n        )\n\n        self.model_path = kagglehub.model_download(\"google/gemma-3/transformers/gemma-3-12b-it\")\n        self.processor = Gemma3Processor.from_pretrained(self.model_path, use_fast=True)\n        self.model = Gemma3ForConditionalGeneration.from_pretrained(self.model_path, \n                                                                    quantization_config=quantization_config,\n                                                                    torch_dtype=torch.bfloat16, \n                                                                    device_map=\"auto\",)\n        \n\n        self.prompt_template = \"\"\"Generate SVG code to visually represent the following text description, while respecting the given constraints and guidelines.\n\n<constraints>\n* **Allowed Elements:** `svg`, `path`, `circle`, `rect`, `ellipse`, `line`, `polyline`, `polygon`, `g`, `linearGradient`, `radialGradient`, `stop`, `defs`\n* **Allowed Attributes:** `viewBox`, `width`, `height`, `fill`, `stroke`, `stroke-width`, `d`, `cx`, `cy`, `r`, `x`, `y`, `rx`, `ry`, `x1`, `y1`, `x2`, `y2`, `points`, `transform`, `opacity`\n* **Output Format:** Always use viewBox=\"0 0 256 256\" with width=\"256\" height=\"256\"\n</constraints>\n\n<example>\n<description>\"A red circle with a blue square inside\"</description>\n```svg\n<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\">\n  <circle cx=\"128\" cy=\"128\" r=\"80\" fill=\"red\"/>\n  <rect x=\"88\" y=\"88\" width=\"80\" height=\"80\" fill=\"blue\"/>\n</svg>\n```\n</example>\n\nPlease ensure that the generated SVG code is well-formed, valid, and strictly adheres to these constraints. Focus on a clear and concise representation of the input description within the given limitations. Always give the complete SVG code with nothing omitted. Never use an ellipsis.\n\n<description>\"{}\"</description>\n```svg\n<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\">\n\"\"\"\n        self.default_svg = \"\"\"<svg width=\"256\" height=\"256\" viewBox=\"0 0 256 256\"><circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"red\" /></svg>\"\"\"\n        self.constraints = svg_constraints.SVGConstraints()\n        self.timeout_seconds = 200 #90\n\n    # You could try increasing `max_new_tokens`\n    def predict(self, description: str, max_new_tokens=512) -> str:\n        def generate_svg():\n            try:\n                prompt = self.prompt_template.format(description)\n                # inputs = self.tokenizer(text=prompt, return_tensors=\"pt\" , add_bos=True).to(DEVICE)\n                inputs = self.processor(text=prompt, return_tensors=\"pt\").to(DEVICE)\n\n                with torch.no_grad():\n                    output = self.model.generate(\n                        **inputs,\n                        max_new_tokens=max_new_tokens,\n                        do_sample=True,\n                        #temperature=0.8,\n                        #top_p=0.95,  # Add nucleus sampling\n                    )\n\n                output_decoded = self.processor.decode(output[0], \n                                                       skip_special_tokens=True, \n                                                       clean_up_tokenization_spaces=False)\n                logging.debug('Output decoded from model: %s', output_decoded)\n\n                matches = re.findall(r\"<svg.*?</svg>\", output_decoded, re.DOTALL | re.IGNORECASE)\n                if matches:\n                    svg = matches[-1]\n                else:\n                    return self.default_svg\n\n                logging.debug('Unprocessed SVG: %s', svg)\n                svg = self.enforce_constraints(svg)\n                logging.debug('Processed SVG: %s', svg)\n                # Ensure the generated code can be converted by cairosvg\n                cairosvg.svg2png(bytestring=svg.encode('utf-8'))\n                return svg\n            except Exception as e:\n                logging.error('Exception during SVG generation: %s', e)\n                return self.default_svg\n\n        # Execute SVG generation in a new thread to enforce time constraints\n        with concurrent.futures.ThreadPoolExecutor(max_workers=1) as executor:\n            future = executor.submit(generate_svg)\n            try:\n                return future.result(timeout=self.timeout_seconds)\n            except concurrent.futures.TimeoutError:\n                logging.warning(\"Prediction timed out after %s seconds.\", self.timeout_seconds)\n                return self.default_svg\n            except Exception as e:\n                logging.error(f\"An unexpected error occurred: {e}\")\n                return self.default_svg\n\n    def enforce_constraints(self, svg_string: str) -> str:\n        \"\"\"Enforces constraints on an SVG string, removing disallowed elements\n        and attributes.\n\n        Parameters\n        ----------\n        svg_string : str\n            The SVG string to process.\n\n        Returns\n        -------\n        str\n            The processed SVG string, or the default SVG if constraints\n            cannot be satisfied.\n        \"\"\"\n        logging.info('Sanitizing SVG...')\n\n        try:\n            parser = etree.XMLParser(remove_blank_text=True, remove_comments=True)\n            root = etree.fromstring(svg_string, parser=parser)\n        except etree.ParseError as e:\n            logging.error('SVG Parse Error: %s. Returning default SVG.', e)\n            return self.default_svg\n    \n        elements_to_remove = []\n        for element in root.iter():\n            tag_name = etree.QName(element.tag).localname\n    \n            # Remove disallowed elements\n            if tag_name not in self.constraints.allowed_elements:\n                elements_to_remove.append(element)\n                continue  # Skip attribute checks for removed elements\n    \n            # Remove disallowed attributes\n            attrs_to_remove = []\n            for attr in element.attrib:\n                attr_name = etree.QName(attr).localname\n                if (\n                    attr_name\n                    not in self.constraints.allowed_elements[tag_name]\n                    and attr_name\n                    not in self.constraints.allowed_elements['common']\n                ):\n                    attrs_to_remove.append(attr)\n    \n            for attr in attrs_to_remove:\n                logging.debug(\n                    'Attribute \"%s\" for element \"%s\" not allowed. Removing.',\n                    attr,\n                    tag_name,\n                )\n                del element.attrib[attr]\n    \n            # Check and remove invalid href attributes\n            for attr, value in element.attrib.items():\n                 if etree.QName(attr).localname == 'href' and not value.startswith('#'):\n                    logging.debug(\n                        'Removing invalid href attribute in element \"%s\".', tag_name\n                    )\n                    del element.attrib[attr]\n\n            # Validate path elements to help ensure SVG conversion\n            if tag_name == 'path':\n                d_attribute = element.get('d')\n                if not d_attribute:\n                    logging.warning('Path element is missing \"d\" attribute. Removing path.')\n                    elements_to_remove.append(element)\n                    continue # Skip further checks for this removed element\n                # Use regex to validate 'd' attribute format\n                path_regex = re2.compile(\n                    r'^'  # Start of string\n                    r'(?:'  # Non-capturing group for each command + numbers block\n                    r'[MmZzLlHhVvCcSsQqTtAa]'  # Valid SVG path commands (adjusted to exclude extra letters)\n                    r'\\s*'  # Optional whitespace after command\n                    r'(?:'  # Non-capturing group for optional numbers\n                    r'-?\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?'  # First number\n                    r'(?:[\\s,]+-?\\d+(?:\\.\\d+)?(?:[Ee][+-]?\\d+)?)*'  # Subsequent numbers with mandatory separator(s)\n                    r')?'  # Numbers are optional (e.g. for Z command)\n                    r'\\s*'  # Optional whitespace after numbers/command block\n                    r')+'  # One or more command blocks\n                    r'\\s*'  # Optional trailing whitespace\n                    r'$'  # End of string\n                )\n                if not path_regex.match(d_attribute):\n                    logging.warning(\n                        'Path element has malformed \"d\" attribute format. Removing path.'\n                    )\n                    elements_to_remove.append(element)\n                    continue\n                logging.debug('Path element \"d\" attribute validated (regex check).')\n        \n        # Remove elements marked for removal\n        for element in elements_to_remove:\n            if element.getparent() is not None:\n                element.getparent().remove(element)\n                logging.debug('Removed element: %s', element.tag)\n\n        try:\n            cleaned_svg_string = etree.tostring(root, encoding='unicode')\n            return cleaned_svg_string\n        except ValueError as e:\n            logging.error(\n                'SVG could not be sanitized to meet constraints: %s', e\n            )\n            return self.default_svg","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T14:17:31.311482Z","iopub.execute_input":"2025-04-20T14:17:31.311792Z","iopub.status.idle":"2025-04-20T14:17:40.931938Z","shell.execute_reply.started":"2025-04-20T14:17:31.311761Z","shell.execute_reply":"2025-04-20T14:17:40.930971Z"}},"outputs":[],"execution_count":2},{"cell_type":"markdown","source":"The following code tests the above model in a local mock-up of this competition's evaluation pipeline. It runs the model on a sample of 15 instances defined in the `test.csv` file in the `kaggle_evaluation` package folder.","metadata":{}},{"cell_type":"code","source":"import kaggle_evaluation\n\n#logging.basicConfig(level=logging.WARNING, force=True)\n#kaggle_evaluation.test(Model)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T14:17:40.933194Z","iopub.execute_input":"2025-04-20T14:17:40.933793Z","iopub.status.idle":"2025-04-20T14:17:41.166535Z","shell.execute_reply.started":"2025-04-20T14:17:40.933767Z","shell.execute_reply":"2025-04-20T14:17:41.165667Z"}},"outputs":[],"execution_count":3},{"cell_type":"code","source":"def generate():\n    import polars as pl\n    from IPython.display import SVG\n    import time  # Import the time module\n    \n    logging.basicConfig(level=logging.ERROR, force=True)\n    \n    train = pl.read_csv('/kaggle/input/drawing-with-llms/train.csv')\n    display(train.head())\n    \n    model = Model()\n    svgs = []\n    for desc in train.get_column('description'):\n        start_time = time.time()  # Record start time\n        svg = model.predict(desc)\n        end_time = time.time()    # Record end time\n        elapsed_time = end_time - start_time # Calculate elapsed time\n        print(f\"Prediction time for description '{desc[:20]}...': {elapsed_time:.4f} seconds\") # Print time\n        print(svg)\n        try:\n            display(SVG(svg))\n        except Exception as e:\n            print(e)\n            continue\n\n# Uncomment and run the line below to see some generated images\ngenerate()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-20T14:17:41.167676Z","iopub.execute_input":"2025-04-20T14:17:41.168030Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"shape: (5, 2)\n┌────────┬─────────────────────────────────┐\n│ id     ┆ description                     │\n│ ---    ┆ ---                             │\n│ str    ┆ str                             │\n╞════════╪═════════════════════════════════╡\n│ 02d892 ┆ a purple forest at dusk         │\n│ 0dcd2e ┆ gray wool coat with a faux fur… │\n│ 1e9ac1 ┆ a lighthouse overlooking the o… │\n│ 2b25db ┆ burgundy corduroy pants with p… │\n│ 4e6a54 ┆ orange corduroy overalls        │\n└────────┴─────────────────────────────────┘","text/html":"<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5, 2)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>id</th><th>description</th></tr><tr><td>str</td><td>str</td></tr></thead><tbody><tr><td>&quot;02d892&quot;</td><td>&quot;a purple forest at dusk&quot;</td></tr><tr><td>&quot;0dcd2e&quot;</td><td>&quot;gray wool coat with a faux fur…</td></tr><tr><td>&quot;1e9ac1&quot;</td><td>&quot;a lighthouse overlooking the o…</td></tr><tr><td>&quot;2b25db&quot;</td><td>&quot;burgundy corduroy pants with p…</td></tr><tr><td>&quot;4e6a54&quot;</td><td>&quot;orange corduroy overalls&quot;</td></tr></tbody></table></div>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Loading checkpoint shards:   0%|          | 0/12 [00:00<?, ?it/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e7cf3734672446f28e785083cf8ffdce"}},"metadata":{}},{"name":"stdout","text":"Prediction time for description 'a purple forest at d...': 168.3274 seconds\n<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"duskgrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#800080\"/><stop offset=\"100%\" stop-color=\"#4B0082\"/></linearGradient><linearGradient id=\"treegrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#6A5ACD\"/><stop offset=\"100%\" stop-color=\"#800080\"/></linearGradient></defs><rect width=\"256\" height=\"256\" fill=\"url(#duskgrad)\"/><g transform=\"translate(20, 100)\"><path d=\"M0 0 L20 100 L40 0 Z\" fill=\"url(#treegrad)\" stroke=\"#3D3D3D\" stroke-width=\"2\"/></g><g transform=\"translate(80, 120)\"><path d=\"M0 0 L20 80 L40 0 Z\" fill=\"url(#treegrad)\" stroke=\"#3D3D3D\" stroke-width=\"2\"/></g><g transform=\"translate(150, 80)\"><path d=\"M0 0 L30 100 L60 0 Z\" fill=\"url(#treegrad)\" stroke=\"#3D3D3D\" stroke-width=\"2\"/></g><g transform=\"translate(220, 110)\"><path d=\"M0 0 L20 90 L40 0 Z\" fill=\"url(#treegrad)\" stroke=\"#3D3D3D\" stroke-width=\"2\"/></g></svg>\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.SVG object>","image/svg+xml":"<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"duskgrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#800080\"/><stop offset=\"100%\" stop-color=\"#4B0082\"/></linearGradient><linearGradient id=\"treegrad\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"0%\" stop-color=\"#6A5ACD\"/><stop offset=\"100%\" stop-color=\"#800080\"/></linearGradient></defs><rect width=\"256\" height=\"256\" fill=\"url(#duskgrad)\"/><g transform=\"translate(20, 100)\"><path d=\"M0 0 L20 100 L40 0 Z\" fill=\"url(#treegrad)\" stroke=\"#3D3D3D\" stroke-width=\"2\"/></g><g transform=\"translate(80, 120)\"><path d=\"M0 0 L20 80 L40 0 Z\" fill=\"url(#treegrad)\" stroke=\"#3D3D3D\" stroke-width=\"2\"/></g><g transform=\"translate(150, 80)\"><path d=\"M0 0 L30 100 L60 0 Z\" fill=\"url(#treegrad)\" stroke=\"#3D3D3D\" stroke-width=\"2\"/></g><g transform=\"translate(220, 110)\"><path d=\"M0 0 L20 90 L40 0 Z\" fill=\"url(#treegrad)\" stroke=\"#3D3D3D\" stroke-width=\"2\"/></g></svg>"},"metadata":{}},{"name":"stdout","text":"Prediction time for description 'gray wool coat with ...': 64.2807 seconds\n<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" fill=\"#EEEEEE\"/><rect x=\"20\" y=\"20\" width=\"216\" height=\"216\" fill=\"#808080\"/><ellipse cx=\"128\" cy=\"60\" rx=\"60\" ry=\"20\" fill=\"#D3D3D3\"/><path d=\"M 68 60 Q 98 40, 128 60 T 188 60\" stroke=\"#FFFFFF\" stroke-width=\"2\" fill=\"transparent\"/></svg>\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.SVG object>","image/svg+xml":"<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" fill=\"#EEEEEE\"/><rect x=\"20\" y=\"20\" width=\"216\" height=\"216\" fill=\"#808080\"/><ellipse cx=\"128\" cy=\"60\" rx=\"60\" ry=\"20\" fill=\"#D3D3D3\"/><path d=\"M 68 60 Q 98 40, 128 60 T 188 60\" stroke=\"#FFFFFF\" stroke-width=\"2\" fill=\"transparent\"/></svg>"},"metadata":{}},{"name":"stdout","text":"Prediction time for description 'a lighthouse overloo...': 120.3788 seconds\n<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"oceanGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"0%\"/><stop offset=\"100%\"/></linearGradient></defs><rect width=\"256\" height=\"128\" fill=\"#f0f8ff\"/><rect y=\"128\" width=\"256\" height=\"128\" fill=\"url(#oceanGradient)\"/><path d=\"M80 208 V128 H50 V88 H100 V48 H170 V88 H200 V128 H170 V148 L180 188 L150 208 Z\" fill=\"#fff\" stroke=\"#000\" stroke-width=\"2\"/><circle cx=\"160\" cy=\"70\" r=\"20\" fill=\"#ffda63\"/><path d=\"M160 70 L160 40 L170 50 L160 60 L150 50 Z\" fill=\"#ffda63\"/></svg>\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.SVG object>","image/svg+xml":"<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"oceanGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\"><stop offset=\"0%\"/><stop offset=\"100%\"/></linearGradient></defs><rect width=\"256\" height=\"128\" fill=\"#f0f8ff\"/><rect y=\"128\" width=\"256\" height=\"128\" fill=\"url(#oceanGradient)\"/><path d=\"M80 208 V128 H50 V88 H100 V48 H170 V88 H200 V128 H170 V148 L180 188 L150 208 Z\" fill=\"#fff\" stroke=\"#000\" stroke-width=\"2\"/><circle cx=\"160\" cy=\"70\" r=\"20\" fill=\"#ffda63\"/><path d=\"M160 70 L160 40 L170 50 L160 60 L150 50 Z\" fill=\"#ffda63\"/></svg>"},"metadata":{}},{"name":"stdout","text":"Prediction time for description 'burgundy corduroy pa...': 131.1504 seconds\n<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" fill=\"#800020\"/><g transform=\"scale(0.8)\"><rect x=\"20\" y=\"40\" width=\"216\" height=\"176\" fill=\"#800020\" stroke=\"#800020\"/><rect x=\"30\" y=\"50\" width=\"40\" height=\"50\" fill=\"#a0522d\" stroke=\"#a0522d\"/><rect x=\"170\" y=\"50\" width=\"40\" height=\"50\" fill=\"#a0522d\" stroke=\"#a0522d\"/><circle cx=\"40\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"55\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"70\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"190\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"205\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"220\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/></g></svg>\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.SVG object>","image/svg+xml":"<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><rect x=\"0\" y=\"0\" width=\"256\" height=\"256\" fill=\"#800020\"/><g transform=\"scale(0.8)\"><rect x=\"20\" y=\"40\" width=\"216\" height=\"176\" fill=\"#800020\" stroke=\"#800020\"/><rect x=\"30\" y=\"50\" width=\"40\" height=\"50\" fill=\"#a0522d\" stroke=\"#a0522d\"/><rect x=\"170\" y=\"50\" width=\"40\" height=\"50\" fill=\"#a0522d\" stroke=\"#a0522d\"/><circle cx=\"40\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"55\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"70\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"190\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"205\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/><circle cx=\"220\" cy=\"100\" r=\"5\" fill=\"#c0c0c0\"/></g></svg>"},"metadata":{}},{"name":"stdout","text":"Prediction time for description 'orange corduroy over...': 155.2952 seconds\n<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"corduroyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"><stop offset=\"0%\"/><stop offset=\"10%\"/><stop offset=\"20%\"/><stop offset=\"30%\"/><stop offset=\"40%\"/><stop offset=\"50%\"/></linearGradient></defs><rect x=\"16\" y=\"16\" width=\"224\" height=\"224\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/><rect x=\"40\" y=\"40\" width=\"32\" height=\"176\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/><rect x=\"128\" y=\"40\" width=\"32\" height=\"176\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/><rect x=\"16\" y=\"64\" width=\"224\" height=\"32\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/><rect x=\"16\" y=\"128\" width=\"224\" height=\"32\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/></svg>\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.SVG object>","image/svg+xml":"<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"corduroyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"><stop offset=\"0%\"/><stop offset=\"10%\"/><stop offset=\"20%\"/><stop offset=\"30%\"/><stop offset=\"40%\"/><stop offset=\"50%\"/></linearGradient></defs><rect x=\"16\" y=\"16\" width=\"224\" height=\"224\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/><rect x=\"40\" y=\"40\" width=\"32\" height=\"176\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/><rect x=\"128\" y=\"40\" width=\"32\" height=\"176\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/><rect x=\"16\" y=\"64\" width=\"224\" height=\"32\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/><rect x=\"16\" y=\"128\" width=\"224\" height=\"32\" fill=\"url(#corduroyGradient)\" stroke=\"black\" stroke-width=\"2\"/></svg>"},"metadata":{}},{"name":"stdout","text":"Prediction time for description 'a purple silk scarf ...': 146.6852 seconds\n<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"silkGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\"/><stop offset=\"100%\"/></linearGradient></defs><path d=\"M 50 50 C 30 70, 30 150, 50 170 L 206 170 C 226 150, 226 70, 206 50 Z\" fill=\"url(#silkGradient)\" stroke=\"#6A5ACD\" stroke-width=\"2\"/><g transform=\"translate(50,50)\"><circle cx=\"10\" cy=\"-10\" r=\"3\" fill=\"#FFD700\"/><circle cx=\"25\" cy=\"5\" r=\"3\" fill=\"#FFD700\"/><circle cx=\"15\" cy=\"15\" r=\"3\" fill=\"#FFD700\"/></g><g transform=\"translate(206,50)\"><circle cx=\"-10\" cy=\"-10\" r=\"3\" fill=\"#FFD700\"/><circle cx=\"-25\" cy=\"5\" r=\"3\" fill=\"#FFD700\"/><circle cx=\"-15\" cy=\"15\" r=\"3\" fill=\"#FFD700\"/></g></svg>\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.SVG object>","image/svg+xml":"<svg viewBox=\"0 0 256 256\" width=\"256\" height=\"256\"><defs><linearGradient id=\"silkGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\"><stop offset=\"0%\"/><stop offset=\"100%\"/></linearGradient></defs><path d=\"M 50 50 C 30 70, 30 150, 50 170 L 206 170 C 226 150, 226 70, 206 50 Z\" fill=\"url(#silkGradient)\" stroke=\"#6A5ACD\" stroke-width=\"2\"/><g transform=\"translate(50,50)\"><circle cx=\"10\" cy=\"-10\" r=\"3\" fill=\"#FFD700\"/><circle cx=\"25\" cy=\"5\" r=\"3\" fill=\"#FFD700\"/><circle cx=\"15\" cy=\"15\" r=\"3\" fill=\"#FFD700\"/></g><g transform=\"translate(206,50)\"><circle cx=\"-10\" cy=\"-10\" r=\"3\" fill=\"#FFD700\"/><circle cx=\"-25\" cy=\"5\" r=\"3\" fill=\"#FFD700\"/><circle cx=\"-15\" cy=\"15\" r=\"3\" fill=\"#FFD700\"/></g></svg>"},"metadata":{}}],"execution_count":null}]}